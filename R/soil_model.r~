
soil_daily <- function(soil_state,soil_param,meteo)
{
 ##   i_t,theta_previous,porosity,soil_depth,phi,K,dt,model_step
    runoff=0
    tt <- 0
    Ft <- 0
    Li <- 0
    theta_i <- soil_state$theta
    
    dTheta <- soil_param$porosity-theta_i
    
        
    while(Li<soil_param$soil_depth)
    {
        tt <- tt+soil_param$dt
        Ft0=Ft
        ft0=calc_ft(soil_param$K,soil_param$phi,dTheta,Ft0)
        Ft=calc_Ft(Ft0,soil_param$phi,dTheta,soil_param$K,soil_param$dt,meteo$i_t)
        ft <- calc_ft(soil_param$K,soil_param$phi,dTheta,Ft)
        
        Li <- Ft/dTheta    ## calculate depth of wetting front        
        if(tt==soil_param$model_step) break;
    }
    
    ## calculate soil water content after this time step
    theta_final <- (soil_param$porosity*Li+theta_i*(soil_param$soil_depth-Li))/soil_param$soil_depth

    soil_state=mutate(soil_state,theta_previous=theta_i,theta=theta_final,runoff=meteo$i_t*soil_param$model_step-Ft)

    return(soil_state)
}


#' compute effective runoff with loss model
#' @return runoff
#' @param subbasin is the global dataframe including rainfall intensity
#' @export
lossModel_green_ampt <- function(subbasin)
{
    
    dt <- subbasin %>% pull(step) %>% .[1]
    I <- subbasin %>% pull(i) %>% .[1]

    dt <- dt/3600
    
    runoff <- select(subbasin,name,L,Ft,,hi.max,area)
    
    if(r==0) ## in case it does not rain...
    {
        runoff <- runoff %>%
            mutate(hi=hi+he*step/(24*60*60),runoff_in=0) %>% ## assign zero in runoff generation and evaporate from soil
            mutate(hi=ifelse(hi>hi.max,hi.max,hi))  %>% ## evaporate only until the soil compartment is empty 
            select(name,runoff_in,hi) 
    } else ## in case it rains...
    {
        runoff <- runoff %>%
            mutate(runoff_in=ifelse(hi > r,0,0.001*area*(r-hi)/dt), ## generate runoff in case the soil compartment is full (this should be replaced by green ampt...)
                   hi=ifelse(hi > r,hi-r,0)) %>% ## fill the soil compartment until it is totally full, ie hi=0
            select(name,runoff_in,hi)
    }

    return(runoff)
}



#' compute effective runoff with loss model
#' @return runoff
#' @param subbasin is the global dataframe including rainfall intensity
#' @export
lossModel <- function(subbasin)
{
    dt <- subbasin %>% pull(step) %>% .[1]
    I <- subbasin %>% pull(i) %>% .[1]

    r <- I*dt/3600
    
    runoff <- select(subbasin,name,hi,he,hi.max,area)
    
    if(r==0) ## in case it does not rain...
    {
        runoff <- runoff %>%
            mutate(hi=hi+he*step/(24*60*60),runoff_in=0) %>% ## assign zero in runoff generation and evaporate from soil
            mutate(hi=ifelse(hi>hi.max,hi.max,hi))  %>% ## evaporate only until the soil compartment is empty 
            select(name,runoff_in,hi) 
    } else ## in case it rains...
    {
        runoff <- runoff %>%
            mutate(runoff_in=ifelse(hi > r,0,0.001*area*(r-hi)/dt), ## generate runoff in case the soil compartment is full (this should be replaced by green ampt...)
                   hi=ifelse(hi > r,hi-r,0)) %>% ## fill the soil compartment until it is totally full, ie hi=0
            select(name,runoff_in,hi)
    }

    return(runoff)
}
